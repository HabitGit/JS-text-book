Отладка:

Через консоль > Sources 

Точка останова – это участок кода, где отладчик автоматически приостановит исполнение JavaScript.

Выполнение кода можно также приостановить с помощью команды debugger прямо изнутри самого кода

Watch– показывает текущие значения для любых выражений.

Call Stack – показывает цепочку вложенных вызовов.

Scope показывает текущие переменные.

 «Resume»: продолжить выполнение, быстрая клавиша F8.

 – «Step»: выполнить следующую команду, быстрая клавиша F9.

 «Step over»: выполнить следующую команду, но не заходя внутрь функции, быстрая клавиша F10.

  «Step into», быстрая клавиша F11.

  – «Step out»: продолжить выполнение до завершения текущей функции, быстрая клавиша Shift+F11.



синтаксис:
console.log() - вывести в консоль

Правила стиля:
 отступы 2 пробела
 после циклов ставить пробел
 отделять пробелами блоки кода по логике
 не делать длинные строки
 пробелы вокруг вложенного вызова alert( pow(x, n) );
 Собирать функции в одной части кода, в начале или конце
линтер ESLint
i, j - общепринятые переменные циклов

**Почему задача решена именно этим способом? Код не даёт ответа.**
**Если в коде есть какие-то тонкости и неочевидные вещи, его определённо нужно комментировать.**

тесты:

Для запуска тестов мы используем фреймворк Mocha 
Chai – библиотека, предоставляющая множество функций проверки 
утверждений.
Sinon – библиотека, позволяющая наблюдать за функциями, 
эмулировать встроенные функции и многое другое. 



describe("pow", function() {

  it("возводит в степень n", function() {
    assert.equal(pow(2, 3), 8);
  });

});

describe("заголовок", function() { ... })
Какую функциональность мы описываем. В нашем случае мы описываем 
функцию pow. Используется для группировки рабочих лошадок – 
блоков it.

it("описание", function() { ... })
В первом аргументе блока it мы человеческим языком описываем 
конкретный способ использования функции, а во втором – пишем 
функцию, которая тестирует данный случай.



