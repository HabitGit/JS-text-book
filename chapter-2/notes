Движки JS:

    V8 – в Chrome, Opera и Edge.
    SpiderMonkey – в Firefox.
    …Ещё есть «Chakra» для IE, «JavaScriptCore», «Nitro» и «SquirrelFish» для Safari и т.д.

Полезности:

https://learn.javascript.ru/manuals-specifications


Особенности:

Если атрибут src установлен, содержимое тега script будет игнорироваться.
"use strict"; - для современного режима
Типы данных:
    number - числовой тип данных. Целое, или с плав. точкой. (Для большинства случаев достаточно безопасного диапазона чисел от -(253-1) до (253-1).)
    infinity - математическая бесконечность.
    NaN - вычислительная ошибка. (исключение NaN ** 0 = 1)
    BigInt - целые числа произвольной длины. Что бы создать этот тип, нужно добавить n в конце числового литерала
    String - Строка '' "" ``. Обратные кавычки используются по типу f строк (`Hello, ${variable}!, ${1 + 2}`)
    boolean - Булевое true false
    null - содержит только значение null
    undefined - значение не было присвоено
    object - Особенный
    symbol - для создания уникальных идентификаторов
Инкрименты\декременты применяются только к переменным variable++; == variable = variable + 1;
++variable - Префиксная форма ; Префикс возвращает новое значение
variable++ - Постфиксная форма; Постфикс возвращает старое значение
Сравнение строк... кодировка Unicode. а > А. При сравнении разных типов, приводится все к числу.
Выход из адской логики js: Оператор строгого равенства === проверяет равенство без приведения типов.; Строгого неравенства !==
(ИСКЛЮЧЕНИЕ: null и undefined при строгом равенстве - они false так как разный тип данных.
При нестрогом равенстве они друг другу равны, и не равны никаким другим значениям.
Почему? Потому. НО при использовании < > <= >= null становится 0 а undefined - NaN
)
Названия функций можно передавать как агрументы и использовать как переменные.




синтаксис:
let name = value; объявить переменную (var в старых скриптах) Пишутся с маленькойВерблюжьимСпособом
const name = value; объявление константы
typeof x - возвращает используемый тип данных
.toString() - преобразует в строку.
str.toUpperCase() - Возвращает строку в верхнем регистре
toFixed(n) округляет число знаков до n после запятой.

alert(''); - Выводит модальное окно
prompt(title, [default]); - Отобразит модальное окно с текстом, полем для ввода текста и снопками ок\отмена. title текст для отображения default - начальное значение в поле для ввода. Квадратные скобки означают что параметр необязательный. Возвращает введенные данные или null при отмене
confirn(question); - отображает модальное окно с текстом вопроса question и двумя кнопками ок и отмена. Возвращает true or false 

String() - Преобразование в строку
числа в строках приводятся к числам при математических операторах
Number() - Преобразует в число
Boolean() - Преобразует в булевое значение
'Если при сложении есть хоть одна строка, то оператор + преобразует вывод в строку.
При использовании остальных операторов все приводится к числу
Унарный + преобразует строку в число'

Побитовые операторы:
    AND(и) ( & )
    OR(или) ( | )
    XOR(побитовое исключающее или) ( ^ )
    NOT(не) ( ~ )
    LEFT SHIFT(левый сдвиг) ( << )
    RIGHT SHIFT(правый сдвиг) ( >> )
    ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )


if(условие) {
    инструкци ;
    } else if (условие) {
        инструкции ;
        } else {
            инструкции ;
            не является обязательным блоком;
            }

Или "let variable = (условие) ? значение1(допустим: true) : значение2(допустим: false);"

Оператор ||(ИЛИ) Возвращает первое true или последее false 
Оператор &&(И) Возвращает первое ложное значение из списка если все истиные возвращается последний
Оператор !(НЕ) Приводит аргумент к булевому значению, затем возвращает противоположное
(Двойной !!(НЕ) исполььзуют что бы привести значение к булевому, как фу-я boolean)
Оператор (??) нулевого слияния.

while (условие) {
    тело;
}
(*Выполнение цикла называется - итерация*)

do {
    body;
} while (Условие);

for (начало; условие; шаг)(for (let i = 0; i < 3; i++)) {
    body;
} 
(*внутри условия нужно инициализировать переменную, это встроенная переменная (let variable = 0;) 
эта переменная живет только внутри цикла. Но так же можно создать переменную вне цикла*)
любая часть цикла for может быть пропущена. Если инициализировать переменную вне цикла,
то можно написать так : for (; i < 3; i++)
Есть те же continue и break
Метки:
labelName: for() {} (
    пример(
        outer: for (let i = 0; i < 3; i++) {

  for (let j = 0; j < 3; j++) {

    let input = prompt(`Значение на координатах (${i},${j})`, '');

    // если пустая строка или Отмена, то выйти из обоих циклов
    if (!input) break outer; // (*)

    // сделать что-нибудь со значениями...
  }
}

alert('Готово!');
    )
)

switch(x) {
    case 'value1': // if (x === 'value1')
    ...
    break

    case 'value2': // if (x === 'value2')
    ...
    break

    default:
        ...
        break
}

Свич выполняется если строгое(===) соответствие установлено в теле соответствующего кейса и далее, до ближайшего брейка
или до конца свича. Если ни один кейс не совпал выполняется дефаулт.
переменная х должна быть создана вне.

Метод function declaration :

function name() {
    body;
}

Метод Function Expression :

let sayHi = function() {
    body;
};

Метод arrow function :

let func = (arg1, arg2 ..argN) => expression; то же самое что и:
let func = function(arg1, arg2, ...argN) {
    return expression;
  };
  
еще пример стрелочной функции, где нужно больше аргументов:
let sum = (a, b) => {  // фигурная скобка, открывающая тело многострочной функции
    let result = a + b;
    return result; // если мы используем фигурные скобки, то нам нужно явно указать "return"
  };

  Math.trunc - встроенная функция, которая удаляет десятичную часть

  